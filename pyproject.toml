[tool.poetry]
name = "Modmail"
version = "0.0.1"
description = "A modmail bot for Discord. Python 3.8+ compatiable"
license = "MIT"

authors = ["aru <genericusername414@gmail.com>", "bast <bast@fastmail.com"]

maintainers = ["aru <genericusername414@gmail.com>"]

readme = "README.md"
repository = "https://github.com/discord-modmail/modmail"
homepage = "https://github.com/discord-modmail/modmail"
keywords = ["discord", "modmail"]

packages = [{ include = "modmail" }]

[tool.poetry.dependencies]
python = "^3.8"
aiohttp = { extras = ["speedups"], version = "^3.7.4" }
colorama = "^0.4.3"
coloredlogs = "^15.0"
"discord.py" = "1.7.0"
pydantic = "^1.8.2"
python-dotenv = "~=0.17.1"
toml = "^0.10.2"

[tool.poetry.dev-dependencies]
black = "^21.7b0"
codecov = "^2.1.11"
coverage = { extras = ["toml"], version = "^5.5" }
flake8 = "~=3.8"
flake8-annotations = "~=2.3"
flake8-bandit = "^2.1.2"
flake8-bugbear = "~=20.1"
flake8-docstrings = "~=1.5"
flake8-isort = "^4.0.0"
flake8-string-format = "~=0.3"
flake8-tidy-imports = "~=4.1"
flake8-todo = "~=0.7"
isort = "^5.9.2"
pep8-naming = "~=0.11"
pre-commit = "~=2.1"
pytest = "^6.2.4"
pytest-cov = "^2.12.1"
pytest-xdist = { version = "^2.3.0", extras = ["psutil"] }
taskipy = "^1.6.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.taskipy.tasks]
black = { cmd = "black --check .", help = "dry run of black" }
pre_export = "poetry update --lock"
export = { cmd = "echo \"Exporting installed packages to requirements.txt.\" && echo '# Do not manually edit.\n# Generate with \"poetry run task export\"\n' > requirements.txt && poetry export --without-hashes >> requirements.txt", help = "Export installed packages in requirements.txt format" }
flake8 = { cmd = "python -m flake8", help = "Lints code with flake8" }
lint = { cmd = "pre-commit run --all-files", help = "Checks all files for CI errors" }
precommit = { cmd = "pre-commit install --install-hooks", help = "Installs the precommit hook" }
report = { cmd = "coverage report", help = "Show coverage report from previously run tests." }
run = { cmd = "python -m modmail", help = "Run bot" }
test = { cmd = "pytest --cov-report= --cov", help = "Runs tests and save results to a coverage report" }
test-nocov = { cmd = "pytest", help = "Runs tests without creating a coverage report" }


[tool.coverage.run]
branch = true
source = ["modmail"]


[tool.black]
line-length = 110
target-version = ['py38']
include = '\.pyi?$'
